{"version":3,"sources":["config.js","Connector.js","App.js","reportWebVitals.js","index.js"],"names":["config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Connector","props","componentDidMount","a","firebase","initializeApp","setState","database","connect","state","myId","ref","remove","on","snapshot","exists","notif","val","messages","isConnected","console","error","sendMessage","receiverId","message","set","from","renderMessage","value","key","nextProps","nextState","this","placeholder","onChange","e","target","onClick","map","React","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRAYeA,G,MAZA,CACbC,OAAQ,0CACNC,WAAY,kCACZC,YAAa,sDACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBC4FJC,E,kDA7Fb,WAAaC,GAAQ,IAAD,8BAClB,cAAMA,IAWNC,kBAZkB,sBAYE,sBAAAC,EAAA,sDAClBC,IAASC,cAAcd,GAEvB,EAAKe,SAAS,CACZC,SAAUH,IAASG,aAJH,2CAZF,EA4BlBC,QA5BkB,sBA4BR,gCAAAL,EAAA,wEAEqB,EAAKM,MAAxBF,EAFF,EAEEA,SAAUG,EAFZ,EAEYA,KAFZ,SAIAH,EAASI,IAAI,WAAaD,GAAME,SAJhC,uBAMAL,EAASI,IAAI,WAAaD,GAAMG,GAAG,SAAS,SAAAC,GAChD,GAAIA,EAASC,SAAU,CACrB,IAAMC,EAAQF,EAASG,MACvB,EAAKX,SAAS,CACZY,SAAS,GAAD,mBAAM,EAAKT,MAAMS,UAAjB,CAA2BF,UAVnC,OAcN,EAAKV,SAAS,CACZa,aAAa,IAfT,gDAkBNC,QAAQC,MAAR,MAlBM,yDA5BQ,EAkDlBC,YAlDkB,sBAkDJ,oCAAAnB,EAAA,wEAEsC,EAAKM,MAA7CF,EAFE,EAEFA,SAAUgB,EAFR,EAEQA,WAAYC,EAFpB,EAEoBA,QAASd,EAF7B,EAE6BA,KAF7B,SAGJH,EAASI,IAAI,WAAaY,GAAYE,IAAI,CAC9CD,UACAE,KAAMhB,IALE,OAOV,EAAKJ,SAAS,CACZkB,QAAS,KARD,gDAWVJ,QAAQC,MAAR,MAXU,yDAlDI,EAiElBM,cAAc,SAACC,EAAOC,GACpB,OAAO,8BACL,+CAAkBD,EAAMF,KAAxB,KAAgCE,EAAMJ,YADvBK,IAhEnB,EAAKpB,MAAQ,CACXF,SAAU,KACVY,aAAa,EACbT,KAAM,GACNa,WAAY,GACZC,QAAS,GACTN,SAAU,IARM,E,kEAoBKY,EAAWC,GAChC,OAAIC,KAAKvB,MAAMF,WAAawB,EAAUxB,W,+BAkD7B,IAAD,OACR,OAAO,8BACJyB,KAAKvB,MAAMU,YAAc,gCACxB,iDACA,uBAAOc,YAAY,KAAKL,MAAOI,KAAKvB,MAAMc,WAAYW,SAAU,SAACC,GAAD,OAAO,EAAK7B,SAAS,CAAEiB,WAAYY,EAAEC,OAAOR,WAC5G,uBAAOK,YAAY,eAAeL,MAAOI,KAAKvB,MAAMe,QAASU,SAAU,SAACC,GAAD,OAAO,EAAK7B,SAAS,CAAEkB,QAASW,EAAEC,OAAOR,WAChH,wBAAQS,QAASL,KAAKV,YAAtB,kBAEA,sDAC0BU,KAAKvB,MAAMS,SAASoB,IAAIN,KAAKL,qBAGrD,gCACA,kDACA,uBAAOC,MAAOI,KAAKvB,MAAMC,KAAMwB,SAAU,SAACC,GAAD,OAAO,EAAK7B,SAAS,CAAEI,KAAMyB,EAAEC,OAAOR,WAC/E,wBAAQS,QAASL,KAAKxB,QAAtB,8B,GAvFY+B,IAAMC,WCQfC,MAVf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,2EACA,uEACA,cAAC,EAAD,QCGSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3a68dc02.chunk.js","sourcesContent":["const config = {\n  apiKey: \"AIzaSyBUJw0xY70GJTswOS_H5T22ekMRfP4JdPY\",\n    authDomain: \"messaging-85e35.firebaseapp.com\",\n    databaseURL: \"https://messaging-85e35-default-rtdb.firebaseio.com\",\n    projectId: \"messaging-85e35\",\n    storageBucket: \"messaging-85e35.appspot.com\",\n    messagingSenderId: \"116251067224\",\n    appId: \"1:116251067224:web:51d942047b661395bd9b2d\",\n    measurementId: \"G-7YFB1JXVFF\"\n  };\n\n\nexport default config\n","import React from 'react'\nimport './App.css'\nimport firebase from 'firebase/app'\nimport 'firebase/database'\nimport config from './config'\n\nclass Connector extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      database: null,\n      isConnected: false,\n      myId: '',\n      receiverId: '',\n      message: '',\n      messages: []\n    }\n  }\n\n    componentDidMount = async () => {\n      firebase.initializeApp(config)\n\n      this.setState({\n        database: firebase.database()\n      })\n    }\n\n    shouldComponentUpdate (nextProps, nextState) {\n      if (this.state.database !== nextState.database) {\n        return false\n      }\n\n      return true\n    }\n\n    connect = async () => {\n      try {\n        const { database, myId } = this.state\n\n        await database.ref('/notifs/' + myId).remove()\n\n        await database.ref('/notifs/' + myId).on('value', snapshot => {\n          if (snapshot.exists()) {\n            const notif = snapshot.val()\n            this.setState({\n              messages: [...this.state.messages, notif]\n            })\n          }\n        })\n        this.setState({\n          isConnected: true\n        })\n      } catch (e) {\n        console.error(e)\n      }\n    }\n\n    sendMessage = async () => {\n      try {\n        const { database, receiverId, message, myId } = this.state\n        await database.ref('/notifs/' + receiverId).set({\n          message,\n          from: myId\n        })\n        this.setState({\n          message: ''\n        })\n      } catch (e) {\n        console.error(e)\n      }\n    }\n\n    renderMessage=(value, key) => {\n      return <div key={key}>\n        <h4>Message from {value.from}: {value.message}</h4>\n      </div>\n    }\n\n    render () {\n      return <div>\n        {this.state.isConnected ? <div>\n          <h3>Send a message:</h3>\n          <input placeholder='to' value={this.state.receiverId} onChange={(e) => this.setState({ receiverId: e.target.value })} />\n          <input placeholder='your message' value={this.state.message} onChange={(e) => this.setState({ message: e.target.value })} />\n          <button onClick={this.sendMessage}>Send</button>\n\n          <div>\n                Received messages: {this.state.messages.map(this.renderMessage)}\n          </div>\n        </div>\n          : <div>\n            <h3>What is your ID:</h3>\n            <input value={this.state.myId} onChange={(e) => this.setState({ myId: e.target.value })} />\n            <button onClick={this.connect}>Connect</button>\n\n          </div>}\n      </div>\n    }\n}\n\nexport default Connector\n","import React from 'react'\nimport './App.css'\nimport Connector from './Connector'\n\nfunction App () {\n  return (\n    <div className='app'>\n      <h1>React Firebase Realtime Database Tutorial</h1>\n      <h2>Send realtime messages to other users</h2>\n      <Connector/>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}